import { TactSourceVerifier } from "./tact-source-verifier";

const pkg =
  "eyJuYW1lIjoiRWNobyIsImNvZGUiOiJ0ZTZjY2dFQ0VBRUFBczhBQVJUL0FQU2tFL1M4OHNnTEFRSUJZZ0lEQXVMUUFkRFRBd0Z4c01BQmtYK1JjT0lCK2tBQklOZEpnUUVMdXZMZ2lDRFhDd29nZ3dtNklZRUUvN3F4OHVDSWd3bTY4dUNKSWtGVmJ3VDRZZTFFME5RQitHTFNBQUdTTUcyT2xmZ28xd3NLZ3dtNjh1Q0pnUUVCMXdBQkFkSGJQT0paMnp3d01NajRRZ0hNZndIS0FNbnRWQTBFQWdGWUN3d0RYdTJpN2Z0d0lkZEp3aCtWTUNEWEN4L2VBcEpiZitBQndBQ1BFeURYU2NJZmp3dUFJTmNoMnp6YlBIL2JNZURlQlFnR0FVTEljQUhMSDI4QUFXK01iVytNQWRzOGJ5SUJ5Wk1oYnJPV0FXOGlXY3pKNkRFUEFncmJQTnM4ZndjSUFBcklBYzhXeVFFbStFRnZKQkFqWHdOL2NGQURnRUlCYlczYlBBa0J6c2h4QWNvQlVBY0J5Z0J3QWNvQ1VBVWcxMG1CQVF1Njh1Q0lJTmNMQ2lDRENib2hnUVQvdXJIeTRJaURDYnJ5NEluUEZsQUQrZ0p3QWNwb0kyNnpKVzZ6c1pjek13RndBY29BNHcwaGJyT2Nmd0hLQUFFZ2J2TFFnQUhNbFRGd0Fjb0E0c2tCK3dBS0FKaC9BY29BeUhBQnlnQndBY29BSkc2em5YOEJ5Z0FFSUc3eTBJQlFCTXlXTkFOd0Fjb0E0aVJ1czUxL0Fjb0FCQ0J1OHRDQVVBVE1salFEY0FIS0FPSndBY29BQW44QnlnQUN5VmpNQUpXN3ZSZ25CYzdEMWRMSzU3SG9Uc09kWktoUnRtZ25DZDFqVXRLMlI4c3lMVHJ5Mzk4V0k1Z25BZ1ZjQWJnR2RqbE01WU9xNUhKYkxEZ25DZGwwNWFzMDdMY3pvT2xtMlVadWlrZ0NWYmcyTHRSTkRVQWZoaTBnQUJrakJ0anBYNEtOY0xDb01KdXZMZ2lZRUJBZGNBQVFIUjJ6emlBZHM4Z05EZ0FFTUcwQ1ZESElid0FCYjR4dGI0eUxkSVpXeHNieXdnamJQQUhiUEc4aUFjbVRJVzZ6bGdGdklsbk15ZWd4MEE4UEFMb2cxMG9oMTBtWElNSUFJc0lBc1k1S0EyOGlnSDhpenpHckFxRUZxd0pSVmJZSUlNSUFuQ0NxQWhYWEdGQXp6eFpBRk41WmJ3SlRRYUhDQUpuSUFXOENVRVNocWdLT0VqRXp3Z0NaMUREUUlOZEtJZGRKa25BZzR1TG9Yd009IiwiYWJpIjoie1wibmFtZVwiOlwiRWNob1wiLFwidHlwZXNcIjpbe1wibmFtZVwiOlwiU3RhdGVJbml0XCIsXCJoZWFkZXJcIjpudWxsLFwiZmllbGRzXCI6W3tcIm5hbWVcIjpcImNvZGVcIixcInR5cGVcIjp7XCJraW5kXCI6XCJzaW1wbGVcIixcInR5cGVcIjpcImNlbGxcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fSx7XCJuYW1lXCI6XCJkYXRhXCIsXCJ0eXBlXCI6e1wia2luZFwiOlwic2ltcGxlXCIsXCJ0eXBlXCI6XCJjZWxsXCIsXCJvcHRpb25hbFwiOmZhbHNlfX1dfSx7XCJuYW1lXCI6XCJDb250ZXh0XCIsXCJoZWFkZXJcIjpudWxsLFwiZmllbGRzXCI6W3tcIm5hbWVcIjpcImJvdW5jZWRcIixcInR5cGVcIjp7XCJraW5kXCI6XCJzaW1wbGVcIixcInR5cGVcIjpcImJvb2xcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fSx7XCJuYW1lXCI6XCJzZW5kZXJcIixcInR5cGVcIjp7XCJraW5kXCI6XCJzaW1wbGVcIixcInR5cGVcIjpcImFkZHJlc3NcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fSx7XCJuYW1lXCI6XCJ2YWx1ZVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiaW50XCIsXCJvcHRpb25hbFwiOmZhbHNlLFwiZm9ybWF0XCI6MjU3fX0se1wibmFtZVwiOlwicmF3XCIsXCJ0eXBlXCI6e1wia2luZFwiOlwic2ltcGxlXCIsXCJ0eXBlXCI6XCJzbGljZVwiLFwib3B0aW9uYWxcIjpmYWxzZX19XX0se1wibmFtZVwiOlwiU2VuZFBhcmFtZXRlcnNcIixcImhlYWRlclwiOm51bGwsXCJmaWVsZHNcIjpbe1wibmFtZVwiOlwiYm91bmNlXCIsXCJ0eXBlXCI6e1wia2luZFwiOlwic2ltcGxlXCIsXCJ0eXBlXCI6XCJib29sXCIsXCJvcHRpb25hbFwiOmZhbHNlfX0se1wibmFtZVwiOlwidG9cIixcInR5cGVcIjp7XCJraW5kXCI6XCJzaW1wbGVcIixcInR5cGVcIjpcImFkZHJlc3NcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fSx7XCJuYW1lXCI6XCJ2YWx1ZVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiaW50XCIsXCJvcHRpb25hbFwiOmZhbHNlLFwiZm9ybWF0XCI6MjU3fX0se1wibmFtZVwiOlwibW9kZVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiaW50XCIsXCJvcHRpb25hbFwiOmZhbHNlLFwiZm9ybWF0XCI6MjU3fX0se1wibmFtZVwiOlwiYm9keVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiY2VsbFwiLFwib3B0aW9uYWxcIjp0cnVlfX0se1wibmFtZVwiOlwiY29kZVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiY2VsbFwiLFwib3B0aW9uYWxcIjp0cnVlfX0se1wibmFtZVwiOlwiZGF0YVwiLFwidHlwZVwiOntcImtpbmRcIjpcInNpbXBsZVwiLFwidHlwZVwiOlwiY2VsbFwiLFwib3B0aW9uYWxcIjp0cnVlfX1dfV0sXCJyZWNlaXZlcnNcIjpbe1wicmVjZWl2ZXJcIjpcImludGVybmFsXCIsXCJtZXNzYWdlXCI6e1wia2luZFwiOlwidGV4dFwifX0se1wicmVjZWl2ZXJcIjpcImludGVybmFsXCIsXCJtZXNzYWdlXCI6e1wia2luZFwiOlwiYW55XCJ9fV0sXCJnZXR0ZXJzXCI6W3tcIm5hbWVcIjpcImhlbGxvXCIsXCJhcmd1bWVudHNcIjpbe1wibmFtZVwiOlwic3JjXCIsXCJ0eXBlXCI6e1wia2luZFwiOlwic2ltcGxlXCIsXCJ0eXBlXCI6XCJzdHJpbmdcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fV0sXCJyZXR1cm5UeXBlXCI6e1wia2luZFwiOlwic2ltcGxlXCIsXCJ0eXBlXCI6XCJzdHJpbmdcIixcIm9wdGlvbmFsXCI6ZmFsc2V9fV0sXCJlcnJvcnNcIjp7XCIyXCI6e1wibWVzc2FnZVwiOlwiU3RhY2sgdW5kZWZsb3dcIn0sXCIzXCI6e1wibWVzc2FnZVwiOlwiU3RhY2sgb3ZlcmZsb3dcIn0sXCI0XCI6e1wibWVzc2FnZVwiOlwiSW50ZWdlciBvdmVyZmxvd1wifSxcIjVcIjp7XCJtZXNzYWdlXCI6XCJJbnRlZ2VyIG91dCBvZiBleHBlY3RlZCByYW5nZVwifSxcIjZcIjp7XCJtZXNzYWdlXCI6XCJJbnZhbGlkIG9wY29kZVwifSxcIjdcIjp7XCJtZXNzYWdlXCI6XCJUeXBlIGNoZWNrIGVycm9yXCJ9LFwiOFwiOntcIm1lc3NhZ2VcIjpcIkNlbGwgb3ZlcmZsb3dcIn0sXCI5XCI6e1wibWVzc2FnZVwiOlwiQ2VsbCB1bmRlcmZsb3dcIn0sXCIxMFwiOntcIm1lc3NhZ2VcIjpcIkRpY3Rpb25hcnkgZXJyb3JcIn0sXCIxM1wiOntcIm1lc3NhZ2VcIjpcIk91dCBvZiBnYXMgZXJyb3JcIn0sXCIzMlwiOntcIm1lc3NhZ2VcIjpcIk1ldGhvZCBJRCBub3QgZm91bmRcIn0sXCIzNFwiOntcIm1lc3NhZ2VcIjpcIkFjdGlvbiBpcyBpbnZhbGlkIG9yIG5vdCBzdXBwb3J0ZWRcIn0sXCIzN1wiOntcIm1lc3NhZ2VcIjpcIk5vdCBlbm91Z2ggVE9OXCJ9LFwiMzhcIjp7XCJtZXNzYWdlXCI6XCJOb3QgZW5vdWdoIGV4dHJhLWN1cnJlbmNpZXNcIn0sXCIxMjhcIjp7XCJtZXNzYWdlXCI6XCJOdWxsIHJlZmVyZW5jZSBleGNlcHRpb25cIn0sXCIxMjlcIjp7XCJtZXNzYWdlXCI6XCJJbnZhbGlkIHNlcmlhbGl6YXRpb24gcHJlZml4XCJ9LFwiMTMwXCI6e1wibWVzc2FnZVwiOlwiSW52YWxpZCBpbmNvbWluZyBtZXNzYWdlXCJ9LFwiMTMxXCI6e1wibWVzc2FnZVwiOlwiQ29uc3RyYWludHMgZXJyb3JcIn0sXCIxMzJcIjp7XCJtZXNzYWdlXCI6XCJBY2Nlc3MgZGVuaWVkXCJ9LFwiMTMzXCI6e1wibWVzc2FnZVwiOlwiQ29udHJhY3Qgc3RvcHBlZFwifSxcIjEzNFwiOntcIm1lc3NhZ2VcIjpcIkludmFsaWQgYXJndW1lbnRcIn0sXCIxMzVcIjp7XCJtZXNzYWdlXCI6XCJDb2RlIG9mIGEgY29udHJhY3Qgd2FzIG5vdCBmb3VuZFwifSxcIjEzNlwiOntcIm1lc3NhZ2VcIjpcIkludmFsaWQgYWRkcmVzc1wifSxcIjEzN1wiOntcIm1lc3NhZ2VcIjpcIk1hc3RlcmNoYWluIHN1cHBvcnQgaXMgbm90IGVuYWJsZWQgZm9yIHRoaXMgY29udHJhY3RcIn19LFwiaW50ZXJmYWNlc1wiOltcIm9yZy50b24uaW50cm9zcGVjdGlvbi52MFwiLFwib3JnLnRvbi5hYmkuaXBmcy52MFwiLFwib3JnLnRvbi5kZXBsb3kubGF6eS52MFwiLFwib3JnLnRvbi5jaGFpbi53b3JrY2hhaW4udjBcIl19IiwiaW5pdCI6eyJraW5kIjoiZGlyZWN0IiwiYXJncyI6W3sibmFtZSI6ImEiLCJ0eXBlIjp7ImtpbmQiOiJzaW1wbGUiLCJ0eXBlIjoiaW50Iiwib3B0aW9uYWwiOmZhbHNlLCJmb3JtYXQiOjI1N319XSwicHJlZml4Ijp7ImJpdHMiOjEsInZhbHVlIjowfSwiZGVwbG95bWVudCI6eyJraW5kIjoic3lzdGVtLWNlbGwiLCJzeXN0ZW0iOiJ0ZTZjY2tFQ0VnRUFBdGtBQVFIQUFRRUZvQjVSQWdFVS93RDBwQlAwdlBMSUN3TUNBV0lJQkFJQldBY0ZBbFc0Tmk3VVRRMUFINFl0SUFBWkl3Ylk2VitDalhDd3FEQ2JyeTRJbUJBUUhYQUFFQjBkczg0Z0hiUElFUVlDVkRISWJ3QUJiNHh0YjR5TGRJWld4c2J5d2dqYlBBSGJQRzhpQWNtVElXNnpsZ0Z2SWxuTXllZ3gwQkFRQUpXN3ZSZ25CYzdEMWRMSzU3SG9Uc09kWktoUnRtZ25DZDFqVXRLMlI4c3lMVHJ5Mzk4V0k1Z25BZ1ZjQWJnR2RqbE01WU9xNUhKYkxEZ25DZGwwNWFzMDdMY3pvT2xtMlVadWlrZ0M0dEFCME5NREFYR3d3QUdSZjVGdzRnSDZRQUVnMTBtQkFRdTY4dUNJSU5jTENpQ0RDYm9oZ1FUL3VySHk0SWlEQ2JyeTRJa2lRVlZ2QlBoaDdVVFExQUg0WXRJQUFaSXdiWTZWK0NqWEN3cURDYnJ5NEltQkFRSFhBQUVCMGRzODRsbmJQREF3eVBoQ0FjeC9BY29BeWUxVUVRa0RYdTJpN2Z0d0lkZEp3aCtWTUNEWEN4L2VBcEpiZitBQndBQ1BFeURYU2NJZmp3dUFJTmNoMnp6YlBIL2JNZURlRHd3S0FncmJQTnM4ZndzTUFBcklBYzhXeVFFbStFRnZKQkFqWHdOL2NGQURnRUlCYlczYlBBMEJ6c2h4QWNvQlVBY0J5Z0J3QWNvQ1VBVWcxMG1CQVF1Njh1Q0lJTmNMQ2lDRENib2hnUVQvdXJIeTRJaURDYnJ5NEluUEZsQUQrZ0p3QWNwb0kyNnpKVzZ6c1pjek13RndBY29BNHcwaGJyT2Nmd0hLQUFFZ2J2TFFnQUhNbFRGd0Fjb0E0c2tCK3dBT0FKaC9BY29BeUhBQnlnQndBY29BSkc2em5YOEJ5Z0FFSUc3eTBJQlFCTXlXTkFOd0Fjb0E0aVJ1czUxL0Fjb0FCQ0J1OHRDQVVBVE1salFEY0FIS0FPSndBY29BQW44QnlnQUN5VmpNQVVMSWNBSExIMjhBQVcrTWJXK01BZHM4YnlJQnlaTWhick9XQVc4aVdjeko2REVRQUxvZzEwb2gxMG1YSU1JQUlzSUFzWTVLQTI4aWdIOGl6ekdyQXFFRnF3SlJWYllJSU1JQW5DQ3FBaFhYR0ZBenp4WkFGTjVaYndKVFFhSENBSm5JQVc4Q1VFU2hxZ0tPRWpFendnQ1oxRERRSU5kS0lkZEprbkFnNHVMb1h3TUFCREJ0NndtZTJnPT0ifX0sInNvdXJjZXMiOnsiZXhhbXBsZXMvZWNoby50YWN0IjoiWTI5dWRISmhZM1FnUldOb2J5QjdDZ29nSUNBZ2FXNXBkQ2hoT2lCSmJuUXBJSHNLSUNBZ0lDQWdJQ0FLSUNBZ0lIMEtJQ0FnSUFvZ0lDQWdjbVZqWldsMlpTaHRjMmM2SUZOMGNtbHVaeWtnZXdvZ0lDQWdJQ0FnSUhKbGNHeDVLRzF6Wnk1aGMwTnZiVzFsYm5Rb0tTazdDaUFnSUNCOUNpQWdJQ0FLSUNBZ0lISmxZMlZwZG1Vb2JYTm5PaUJUYkdsalpTa2dld29nSUNBZ0lDQWdJSEpsY0d4NUtHMXpaeTVoYzBObGJHd29LU2s3Q2lBZ0lDQjlDZ29nSUNBZ1oyVjBJR1oxYmlCb1pXeHNieWh6Y21NNklGTjBjbWx1WnlrNklGTjBjbWx1WnlCN0NpQWdJQ0FnSUNBZ2JHVjBJR0oxYVd4a1pYSTZJRk4wY21sdVowSjFhV3hrWlhJZ1BTQmlaV2RwYmxOMGNtbHVaeWdwT3dvZ0lDQWdJQ0FnSUdKMWFXeGtaWEl1WVhCd1pXNWtLQ0pJWld4c2J5d2dJaWs3Q2lBZ0lDQWdJQ0FnWW5WcGJHUmxjaTVoY0hCbGJtUW9jM0pqS1RzS0lDQWdJQ0FnSUNCeVpYUjFjbTRnWW5WcGJHUmxjaTUwYjFOMGNtbHVaeWdwT3dvZ0lDQWdmUXA5In0sImNvbXBpbGVyIjp7Im5hbWUiOiJ0YWN0IiwidmVyc2lvbiI6IjEuMC4wLXJjLjEwIiwicGFyYW1ldGVycyI6IntcImVudHJ5cG9pbnRcIjpcIi4vZXhhbXBsZXMvZWNoby50YWN0XCIsXCJvcHRpb25zXCI6e319In19";

describe("TactSourceVerifier", () => {
  it("compiles", async function () {
    const tactVerifier = new TactSourceVerifier({
      writeFile: async (_path, content) => {},
      readFile: async (path) => {
        if (path === "echo.pkg") return Buffer.from(pkg, "base64");
        throw new Error("Unknown path");
      },
      readdir: async () => [],
    });

    const res = await tactVerifier.verify({
      compiler: "tact",
      compilerSettings: { tactVersion: "1.0.0-rc8" },
      knownContractAddress: "",
      knownContractHash: "htGkXV77gc/Tx5Z55tyTyZT8aSpmpnpkFPZpe4lPMIQ=",
      senderAddress: "",
      sources: [
        {
          path: "echo.pkg",
        },
      ],
      tmpDir: "",
    });

    expect(res.result).toEqual("similar");
  });

  it("invalid file format", async function () {
    const tactVerifier = new TactSourceVerifier({
      writeFile: async (_path, content) => {},
      readFile: async (path) => {
        if (path === "echo.pkg") return Buffer.from("{{");
        throw new Error("Unknown path");
      },
      readdir: async () => [],
    });

    const res = await tactVerifier.verify({
      compiler: "tact",
      compilerSettings: { tactVersion: "1.0.0-rc8" },
      knownContractAddress: "",
      knownContractHash: "htGkXV77gc/Tx5Z55tyTyZT8aSpmpnpkFPZpe4lPMIQ=",
      senderAddress: "",
      sources: [
        {
          path: "echo.pkg",
        },
      ],
      tmpDir: "",
    });

    expect(res.result).toEqual("unknown_error");
  });
});
